./src/com/lotterLang/tools/AstPrinter.java:26: error: operator is not public in Binary; cannot be accessed from outside package
        return parenthesize(expr.operator.lexeme, expr.left, expr.right);
                                ^
./src/com/lotterLang/tools/AstPrinter.java:26: error: lexeme is not public in Token; cannot be accessed from outside package
        return parenthesize(expr.operator.lexeme, expr.left, expr.right);
                                         ^
./src/com/lotterLang/tools/AstPrinter.java:26: error: left is not public in Binary; cannot be accessed from outside package
        return parenthesize(expr.operator.lexeme, expr.left, expr.right);
                                                      ^
./src/com/lotterLang/tools/AstPrinter.java:26: error: right is not public in Binary; cannot be accessed from outside package
        return parenthesize(expr.operator.lexeme, expr.left, expr.right);
                                                                 ^
./src/com/lotterLang/tools/AstPrinter.java:31: error: expression is not public in Grouping; cannot be accessed from outside package
        return parenthesize("group", expr.expression);
                                         ^
./src/com/lotterLang/tools/AstPrinter.java:36: error: value is not public in Literal; cannot be accessed from outside package
        if (expr.value = null) return "nil";
                ^
./src/com/lotterLang/tools/AstPrinter.java:36: error: incompatible types: Object cannot be converted to boolean
        if (expr.value = null) return "nil";
                       ^
./src/com/lotterLang/tools/AstPrinter.java:37: error: value is not public in Literal; cannot be accessed from outside package
        return expr.value.toString();
                   ^
./src/com/lotterLang/tools/AstPrinter.java:42: error: operator is not public in Unary; cannot be accessed from outside package
        return parenthesize(expr.operator.lexeme, expr.right);
                                ^
./src/com/lotterLang/tools/AstPrinter.java:42: error: lexeme is not public in Token; cannot be accessed from outside package
        return parenthesize(expr.operator.lexeme, expr.right);
                                         ^
./src/com/lotterLang/tools/AstPrinter.java:42: error: right is not public in Unary; cannot be accessed from outside package
        return parenthesize(expr.operator.lexeme, expr.right);
                                                      ^
./src/com/lotterLang/Expr.java:18: error: <R#1>accept(Visitor<R#1>) in Binary cannot override <R#2>accept(Visitor<R#2>) in Expr
    <R> R accept(Visitor<R> visitor) {
          ^
  attempting to assign weaker access privileges; was public
  where R#1,R#2 are type-variables:
    R#1 extends Object declared in method <R#1>accept(Visitor<R#1>)
    R#2 extends Object declared in method <R#2>accept(Visitor<R#2>)
./src/com/lotterLang/Expr.java:35: error: <R#1>accept(Visitor<R#1>) in Grouping cannot override <R#2>accept(Visitor<R#2>) in Expr
    <R> R accept(Visitor<R> visitor) {
          ^
  attempting to assign weaker access privileges; was public
  where R#1,R#2 are type-variables:
    R#1 extends Object declared in method <R#1>accept(Visitor<R#1>)
    R#2 extends Object declared in method <R#2>accept(Visitor<R#2>)
./src/com/lotterLang/Expr.java:48: error: <R#1>accept(Visitor<R#1>) in Literal cannot override <R#2>accept(Visitor<R#2>) in Expr
    <R> R accept(Visitor<R> visitor) {
          ^
  attempting to assign weaker access privileges; was public
  where R#1,R#2 are type-variables:
    R#1 extends Object declared in method <R#1>accept(Visitor<R#1>)
    R#2 extends Object declared in method <R#2>accept(Visitor<R#2>)
./src/com/lotterLang/Expr.java:61: error: <R#1>accept(Visitor<R#1>) in Unary cannot override <R#2>accept(Visitor<R#2>) in Expr
    <R> R accept(Visitor<R> visitor) {
          ^
  attempting to assign weaker access privileges; was public
  where R#1,R#2 are type-variables:
    R#1 extends Object declared in method <R#1>accept(Visitor<R#1>)
    R#2 extends Object declared in method <R#2>accept(Visitor<R#2>)
15 errors
